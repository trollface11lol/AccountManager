# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import accountsmanager_v1_pb2 as accountsmanager__v1__pb2


class AccountsManagerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AddAccount = channel.unary_unary(
                '/AccountsManager/AddAccount',
                request_serializer=accountsmanager__v1__pb2.AddAccountRequest.SerializeToString,
                response_deserializer=accountsmanager__v1__pb2.AddAccountResponse.FromString,
                )
        self.VkApiCall = channel.unary_unary(
                '/AccountsManager/VkApiCall',
                request_serializer=accountsmanager__v1__pb2.VkApiCallRequest.SerializeToString,
                response_deserializer=accountsmanager__v1__pb2.VkApiCallResponse.FromString,
                )
        self.GetAccounts = channel.unary_unary(
                '/AccountsManager/GetAccounts',
                request_serializer=accountsmanager__v1__pb2.GetAccountsRequest.SerializeToString,
                response_deserializer=accountsmanager__v1__pb2.GetAccountsResponse.FromString,
                )
        self.ConnectAudioQueue = channel.unary_stream(
                '/AccountsManager/ConnectAudioQueue',
                request_serializer=accountsmanager__v1__pb2.ConnectAudioQueueRequest.SerializeToString,
                response_deserializer=accountsmanager__v1__pb2.ConnectAudioQueueResponse.FromString,
                )
        self.GetAccountsSessions = channel.unary_unary(
                '/AccountsManager/GetAccountsSessions',
                request_serializer=accountsmanager__v1__pb2.GetAccountsSessionsRequest.SerializeToString,
                response_deserializer=accountsmanager__v1__pb2.GetAccountsSessionsResponse.FromString,
                )
        self.CheckAccounts = channel.unary_stream(
                '/AccountsManager/CheckAccounts',
                request_serializer=accountsmanager__v1__pb2.CheckAccountsRequest.SerializeToString,
                response_deserializer=accountsmanager__v1__pb2.CheckAccountsResponse.FromString,
                )


class AccountsManagerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def AddAccount(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def VkApiCall(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAccounts(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ConnectAudioQueue(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAccountsSessions(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CheckAccounts(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AccountsManagerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'AddAccount': grpc.unary_unary_rpc_method_handler(
                    servicer.AddAccount,
                    request_deserializer=accountsmanager__v1__pb2.AddAccountRequest.FromString,
                    response_serializer=accountsmanager__v1__pb2.AddAccountResponse.SerializeToString,
            ),
            'VkApiCall': grpc.unary_unary_rpc_method_handler(
                    servicer.VkApiCall,
                    request_deserializer=accountsmanager__v1__pb2.VkApiCallRequest.FromString,
                    response_serializer=accountsmanager__v1__pb2.VkApiCallResponse.SerializeToString,
            ),
            'GetAccounts': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAccounts,
                    request_deserializer=accountsmanager__v1__pb2.GetAccountsRequest.FromString,
                    response_serializer=accountsmanager__v1__pb2.GetAccountsResponse.SerializeToString,
            ),
            'ConnectAudioQueue': grpc.unary_stream_rpc_method_handler(
                    servicer.ConnectAudioQueue,
                    request_deserializer=accountsmanager__v1__pb2.ConnectAudioQueueRequest.FromString,
                    response_serializer=accountsmanager__v1__pb2.ConnectAudioQueueResponse.SerializeToString,
            ),
            'GetAccountsSessions': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAccountsSessions,
                    request_deserializer=accountsmanager__v1__pb2.GetAccountsSessionsRequest.FromString,
                    response_serializer=accountsmanager__v1__pb2.GetAccountsSessionsResponse.SerializeToString,
            ),
            'CheckAccounts': grpc.unary_stream_rpc_method_handler(
                    servicer.CheckAccounts,
                    request_deserializer=accountsmanager__v1__pb2.CheckAccountsRequest.FromString,
                    response_serializer=accountsmanager__v1__pb2.CheckAccountsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'AccountsManager', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class AccountsManager(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def AddAccount(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AccountsManager/AddAccount',
            accountsmanager__v1__pb2.AddAccountRequest.SerializeToString,
            accountsmanager__v1__pb2.AddAccountResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def VkApiCall(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AccountsManager/VkApiCall',
            accountsmanager__v1__pb2.VkApiCallRequest.SerializeToString,
            accountsmanager__v1__pb2.VkApiCallResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAccounts(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AccountsManager/GetAccounts',
            accountsmanager__v1__pb2.GetAccountsRequest.SerializeToString,
            accountsmanager__v1__pb2.GetAccountsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ConnectAudioQueue(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/AccountsManager/ConnectAudioQueue',
            accountsmanager__v1__pb2.ConnectAudioQueueRequest.SerializeToString,
            accountsmanager__v1__pb2.ConnectAudioQueueResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAccountsSessions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AccountsManager/GetAccountsSessions',
            accountsmanager__v1__pb2.GetAccountsSessionsRequest.SerializeToString,
            accountsmanager__v1__pb2.GetAccountsSessionsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CheckAccounts(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/AccountsManager/CheckAccounts',
            accountsmanager__v1__pb2.CheckAccountsRequest.SerializeToString,
            accountsmanager__v1__pb2.CheckAccountsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
